{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Swagger Pet Store",
    "description": "A simple REST API for managing pets"
  },
  "host": "localhost:5001",
  "basePath": "/api",
  "schemes": ["http", "https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "tags": [
    {
      "name": "pets",
      "description": "Everything about your Pets"
    },
    {
      "name": "store",
      "description": "Access to Petstore orders"
    },
    {
      "name": "users",
      "description": "Operations about user"
    }
  ],
  "components": {
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "api_key"
      }
    }
  },
  "paths": {
    "/pets": {
      "post": {
        "summary": "Add a new pet to the store",
        "description": "",
        "tags": ["pets"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pet added to the store"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "summary": "Add a new pet to the store",
        "description": "",
        "tags": ["pets"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pet updated to the store"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/pets/{petId}": {
      "get": {
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "tags": ["pets"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        }
      },
      "post": {
        "summary": "Add a new pet to the store by id",
        "description": "",
        "tags": ["pets"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pet added to the store by id"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "summary": "Delete pet by ID",
        "tags": ["pets"],
        "responses": {
          "200": {
            "description": "Pet deleted from the store"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/pets/findByStatus": {
      "get": {
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "tags": ["pets"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        }
      }
    },
    "/pets/findByTags": {
      "get": {
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "tags": ["pets"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        }
      }
    },
    "/pets/{petId}/uploadImage": {
      "post": {
        "summary": "Upload a new image to a pet by id",
        "description": "",
        "tags": ["pets"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PetByImage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pet added to the store by id"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/user": {
      "post": {
        "summary": "Create user",
        "operationId": "createUser",
        "tags": ["users"],
        "requestBody": {
          "description": "Created user object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "tags": ["users"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "summary": "Update user",
        "operationId": "updateUser",
        "tags": ["users"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "404": {
          "description": "User not found"
        }
      },
      "delete": {
        "summary": "Delete user",
        "operationId": "deleteUser",
        "tags": ["users"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/user/login": {
      "get": {
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "tags": ["users"],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    },
    "/user/logout": {
      "get": {
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "tags": ["users"],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/store/order": {
      "post": {
        "summary": "Place an order for a pet",
        "operationId": "placeOrder",
        "tags": ["store"],
        "requestBody": {
          "description": "order placed for purchasing the pet",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "summary": "Find purchase order by ID",
        "operationId": "getOrderById",
        "tags": ["store"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "summary": "Delete purchase order by ID",
        "operationId": "deleteOrder",
        "tags": ["store"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Pet": {
      "type": "object",
      "required": ["name", "photoUrls"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "photoUrls": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/Tag"
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": ["available", "pending", "sold"]
        }
      }
    },
    "PetByImage": {
      "photoUrls": {
        "type": "object",
        "items": {
          "type": "string"
        }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int64"
        },
        "shipDate": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": ["available", "pending", "sold"]
        },
        "complete": {
          "type": "string",
          "example": "boolean   "
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    }
  }
}
